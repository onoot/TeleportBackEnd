apiVersion: apps/v1
kind: Deployment
metadata:
  name: channel-service
  namespace: messenger
  labels:
    app: channel-service
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: channel-service
  template:
    metadata:
      labels:
        app: channel-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: channel-service
        image: local/channel-service:latest
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        imagePullPolicy: Never
        ports:
        - containerPort: 3000
          name: http
        - containerPort: 3001
          name: ws
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3000"
        - name: WS_PORT
          value: "3001"
        # База данных
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_HOST
        - name: DB_PORT
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PORT
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: POSTGRES_DB
        # JWT
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: app-secrets
              key: JWT_SECRET
        - name: JWT_EXPIRES_IN
          value: "24h"
        # CORS
        - name: CORS_ORIGIN
          value: "*"
        # R2 Storage
        - name: R2_ACCOUNT_ID
          valueFrom:
            secretKeyRef:
              name: r2-secret
              key: account_id
        - name: R2_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: r2-secret
              key: access_key_id
        - name: R2_ACCESS_KEY_SECRET
          valueFrom:
            secretKeyRef:
              name: r2-secret
              key: access_key_secret
        - name: R2_BUCKET_NAME
          valueFrom:
            secretKeyRef:
              name: r2-secret
              key: bucket_name
        - name: R2_PUBLIC_URL
          valueFrom:
            secretKeyRef:
              name: r2-secret
              key: public_url
        # Kafka
        - name: KAFKA_BROKERS
          valueFrom:
            secretKeyRef:
              name: kafka-secrets
              key: KAFKA_BROKERS
        - name: KAFKA_SSL
          value: "false"
        - name: KAFKA_SASL_USERNAME
          valueFrom:
            secretKeyRef:
              name: kafka-secrets
              key: KAFKA_SASL_USERNAME
        - name: KAFKA_SASL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kafka-secrets
              key: KAFKA_SASL_PASSWORD
        - name: KAFKA_SASL_MECHANISM
          value: "plain"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 2
          successThreshold: 1
          failureThreshold: 30
---
apiVersion: v1
kind: Service
metadata:
  name: channel-service
  namespace: messenger
  labels:
    app: channel-service
spec:
  selector:
    app: channel-service
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: http
    - name: ws
      protocol: TCP
      port: 3001
      targetPort: ws
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: channel-service-ingress
  namespace: messenger
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web,websecure
    traefik.ingress.kubernetes.io/router.middlewares: messenger-strip-prefix@kubernetescrd
spec:
  rules:
  - host: api.messenger.local
    http:
      paths:
      - path: /channels
        pathType: Prefix
        backend:
          service:
            name: channel-service
            port:
              name: http
      - path: /ws/channels
        pathType: Prefix
        backend:
          service:
            name: channel-service
            port:
              name: ws
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: channel-service-hpa
  namespace: messenger
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: channel-service
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Pods
        value: 2
        periodSeconds: 60
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Pods
        value: 1
        periodSeconds: 60 






























